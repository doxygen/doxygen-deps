name: Build LLVM Static

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Build type for CMake
  BUILD_TYPE: Release

jobs:
  build-llvm:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            extension: ""
            archive_format: tar.gz
            cmake_args: >-
              -DLLVM_ENABLE_PIC=OFF
              -DLLVM_ENABLE_TERMINFO=OFF
              -DLLVM_TARGETS_TO_BUILD="X86;AArch64"
          - os: windows-latest
            platform: windows
            extension: .exe
            archive_format: zip
            cmake_args: >-
              -DLLVM_USE_CRT_RELEASE=MT
              -DLLVM_TARGETS_TO_BUILD="X86;AArch64"
              -DCMAKE_MSVC_RUNTIME_LIBRARY=MultiThreaded
              -DLLVM_ENABLE_ZLIB=OFF
          - os: macos-latest
            platform: macos
            extension: ""
            archive_format: tar.gz
            cmake_args: >-
              -DLLVM_ENABLE_PIC=OFF
              -DLLVM_TARGETS_TO_BUILD="X86;AArch64"
              -DCMAKE_OSX_DEPLOYMENT_TARGET=10.15
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Install dependencies (Linux)
      if: matrix.platform == 'linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          cmake \
          ninja-build \
          git \
          python3 \
          python3-pip \
          zlib1g-dev \
          libedit-dev \
          libffi-dev \
          libxml2-dev \
          libtinfo-dev
      shell: bash

    - name: Install dependencies (Windows)
      if: matrix.platform == 'windows'
      run: |
        choco install ninja
      shell: bash

    - name: Install dependencies (macOS)
      if: matrix.platform == 'macos'
      run: |
        brew install cmake ninja
      shell: bash

    - name: Get latest LLVM release tag
      id: llvm-version
      run: |
        # Get the latest release tag from LLVM GitHub repository with retry logic
        LATEST_TAG=$(curl -s https://api.github.com/repos/llvm/llvm-project/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/')
        if [ -z "$LATEST_TAG" ]; then
           echo "Error: Could not fetch LLVM release tag"
           exit 1
        fi
        echo "Latest LLVM release: $LATEST_TAG"
        echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        # Extract version without llvmorg- prefix
        VERSION=${LATEST_TAG#llvmorg-}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
      shell: bash

    - name: Cache LLVM source
      id: cache-llvm-source
      uses: actions/cache@v4
      with:
        path: llvm-project
        key: llvm-source-${{ steps.llvm-version.outputs.tag }}-${{ matrix.platform }}

    - name: Download LLVM source code
      if: steps.cache-llvm-source.outputs.cache-hit != 'true'
      run: |
        echo "Downloading LLVM ${{ steps.llvm-version.outputs.tag }}"
        git clone --depth 1 --branch ${{ steps.llvm-version.outputs.tag }} https://github.com/llvm/llvm-project.git
        if [ ! -d "llvm-project/llvm" ]; then
          echo "Error: LLVM source download failed or directory structure is incorrect"
          exit 1
        fi
        echo "LLVM source downloaded successfully"
      shell: bash

    - name: Configure CMake for LLVM
      run: |
        # Verify LLVM source directory exists
        if [ ! -d "llvm-project/llvm" ] && [ "${{ matrix.platform }}" != "windows" ]; then
          echo "Error: LLVM source directory not found"
          exit 1
        elif [ "${{ matrix.platform }}" == "windows" ] && [ ! -d "llvm-project/llvm" ]; then
          echo "Error: LLVM source directory not found"
          exit 1
        fi
        mkdir -p llvm-project/build
        cd llvm-project/build
        cmake ../llvm \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_INSTALL_PREFIX=${{ github.workspace }}/llvm-install \
          -DLLVM_ENABLE_PROJECTS="clang;lld" \
          -DLIBCLANG_BUILD_STATIC=ON \
          -DLLVM_ENABLE_OCAMLDOC=OFF \
          -DLLVM_ENABLE_LTO=OFF \
          -DLLVM_ENABLE_WARNINGS=OFF \
          -DLLVM_ENABLE_Z3_SOLVER=OFF \
          -DLLVM_ENABLE_ZSTD=OFF \
          -DLLVM_ENABLE_BINDING=OFF \
          -DLLVM_ENABLE_LIBXML2=OFF \
          -DLLVM_ENABLE_LIBEDIT=OFF \
          -DLLVM_ENABLE_ASSERTIONS=OFF \
          -DLLVM_INCLUDE_BENCHMARKS=OFF \
          -DLLVM_INCLUDE_TESTS=OFF \
          -DLLVM_INCLUDE_EXAMPLES=OFF \
          -DLLVM_TOOL_REMARKS_SHLIB_BUILD=OFF \
          -DLLVM_PARALLEL_LINK_JOBS=1 \
          ${{ matrix.cmake_args }}
      shell: bash

    - name: Build LLVM
      run: |
        cd llvm-project/build
        if [ "${{ matrix.platform }}" == "windows" ]; then
          ninja -j${NUMBER_OF_PROCESSORS:-4}
        elif [ "${{ matrix.platform }}" == "macos" ]; then
          ninja -j$(sysctl -n hw.logicalcpu)
        else
          ninja -j$(nproc)
        fi
      shell: bash

    - name: Install LLVM
      run: |
        cd llvm-project/build
        ninja install
      shell: bash

    - name: Verify static build
      run: |
        echo "Checking libclang static library..."
        if [ "${{ matrix.platform }}" == "windows" ]; then
          find ${{ github.workspace }}/llvm-install -name "libclang*.lib" -o -name "clang*.lib" | head -10
        else
          find ${{ github.workspace }}/llvm-install -name "libclang*.a" | head -10
        fi
        echo "Checking clang binary..."
        ls -la ${{ github.workspace }}/llvm-install/bin/clang${{ matrix.extension }} || true
        echo "Checking lld binary..."
        ls -la ${{ github.workspace }}/llvm-install/bin/lld${{ matrix.extension }} || true
        echo "Testing clang version..."
        ${{ github.workspace }}/llvm-install/bin/clang${{ matrix.extension }} --version || true
      shell: bash

    - name: Create build artifact
      run: |
        cd ${{ github.workspace }}
        if [ "${{ matrix.archive_format }}" == "zip" ]; then
          # Use PowerShell for Windows zip creation
          powershell.exe -Command "Compress-Archive -Path 'llvm-install\\*' -DestinationPath 'llvm-static-${{ steps.llvm-version.outputs.version }}-${{ matrix.platform }}.zip' -Force"
        else
          tar -czf llvm-static-${{ steps.llvm-version.outputs.version }}-${{ matrix.platform }}.tar.gz -C llvm-install .
        fi
      shell: bash

    - name: Upload LLVM static build
      uses: actions/upload-artifact@v4
      with:
        name: llvm-static-${{ steps.llvm-version.outputs.version }}-${{ matrix.platform }}
        path: llvm-static-${{ steps.llvm-version.outputs.version }}-${{ matrix.platform }}.${{ matrix.archive_format }}
        retention-days: 30

    - name: Display build summary
      run: |
        echo "## LLVM Build Summary (${{ matrix.platform }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
        echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
        echo "- **LLVM Version**: ${{ steps.llvm-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Build Type**: ${{ env.BUILD_TYPE }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Enabled Projects**: clang, lld" >> $GITHUB_STEP_SUMMARY
        echo "- **Static Build**: Enabled" >> $GITHUB_STEP_SUMMARY
        echo "- **libclang Static**: Enabled" >> $GITHUB_STEP_SUMMARY
        echo "- **Archive Format**: ${{ matrix.archive_format }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Platform-specific CMake Args" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo '${{ matrix.cmake_args }}' >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Installed Components" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        find ${{ github.workspace }}/llvm-install/bin -type f -executable 2>/dev/null | head -20 >> $GITHUB_STEP_SUMMARY || true
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
      shell: bash
