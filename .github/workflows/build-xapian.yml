name: Build Xapian Static

on:
  workflow_dispatch:

env:
  # Build type
  BUILD_TYPE: Release

jobs:
  build-xapian:
    strategy:
      fail-fast: false
      matrix:
        include:
          #- os: ubuntu-latest
          #  platform: linux
          #  archive_format: tar.gz
          #  configure_args: ""
          - os: windows-latest
            platform: windows
            archive_format: zip
            configure_args: ""
          #- os: macos-latest
          #  platform: macos
          #  archive_format: tar.gz
          #  configure_args: ""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libmagic-dev \
            build-essential \
            autoconf \
            automake \
            libtool \
            git \
            zlib1g-dev \
            uuid-dev
        shell: bash

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows'
        run: |
          choco install wget -y
        shell: bash

      - name: Install MSYS2 (Windows)
        uses: msys2/setup-msys2@v2
        if: matrix.platform == 'windows'
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            autoconf
            automake
            libtool
            jq

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos'
        run: |
          brew install autoconf automake libtool libmagic
        shell: bash

      - name: Get latest Xapian stable release tag
        id: xapian-version
        run: |
          VERSION="1.4.29"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
        shell: bash

      - name: Cache Xapian source
        id: cache-xapian-source
        uses: actions/cache@v4
        with:
          path: xapian
          key: xapian-core-${{ steps.xapian-version.outputs.version }}.tar.xz

      - name: Download Xapian source code
        if: steps.cache-xapian-source.outputs.cache-hit != 'true'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          echo "Downloading Xapian $VERSION"
          wget https://oligarchy.co.uk/xapian/$VERSION/xapian-core-$VERSION.tar.xz
          tar -Jxf xapian-core-$VERSION.tar.xz
          echo "Xapian source downloaded successfully"
        shell: bash

      - name: Configure Xapian (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          cd xapian-core-$VERSION
          ./configure \
            --prefix=${{ github.workspace }}/xapian-install \
            --enable-static=yes \
            --enable-shared=no \
            --disable-documentation \
            ${{ matrix.configure_args }}
        shell: bash
        
      - name: Set up MSVC dev command prompt (Windows)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      #- name: Set MSYS2_PATH_TYPE in registry for current user
      #  if: matrix.platform == 'windows'
      #  shell: pwsh
      #  run: |
      #    Set-ItemProperty -Path "HKCU:\Environment" -Name "MSYS2_PATH_TYPE" -Value "inherit"

      #- name: Set MSYS2_PATH_TYPE for the workflow (immediate use)
      #  if: matrix.platform == 'windows'
      #  run: echo "MSYS2_PATH_TYPE=inherit" >> $GITHUB_ENV
      
      - name: Configure and build Xapian (MSYS2 + MSVC)
        if: matrix.platform == 'windows'
        shell: cmd
        run: |
          @echo on
          set VERSION=${{ steps.xapian-version.outputs.version }}
          cd xapian-core-%VERSION%   
          echo ./configure --help > run_me.sh
          echo ./configure >> run_me.sh
          @rem echo ./configure CC='cl -nologo' CXX='./compile cl -nologo' CXXFLAGS='-EHsc' AR=lib LD=link NM=dumpbin --disable-documentation --enable-static=yes --enable-shared=no >> run_me.sh
          @rem start C:\msys64\msys2_shell.cmd -defterm -no-start -mingw64 -here -use-full-path -c "echo \"path=$PWD\""
          @rem set XAPIAN_DIR=%cd%
          @rem "C:\msys64\usr\bin\bash.exe" -lc "echo $pwd ; echo $VERSION ; CC=\"cl -nologo\" CXX=\"cl -nologo\" CXXFLAGS=-EHsc AR=lib LD=link NM=dumpbin --prefix=$PWD/xapian-install --enable-static=yes --enable-shared=no --disable-documentation"
          @rem "C:\msys64\usr\bin\bash.exe" -c "export xapian_path=$(cygpath \"$XAPIAN_DIR\"); cd $xapian_path ; echo \"root=$PWD\"; echo ./configure CC=\"cl -nologo\" CXX=\"cl -nologo\" CXXFLAGS=-EHsc AR=lib LD=link NM=dumpbin --prefix=$(cygpath \"${{ github.workspace }}\")/xapian-install --enable-static=yes --enable-shared=no --disable-documentation"
          set MSYS2_PATH_TYPE=inherit
          C:\msys64\usr\bin\bash -c "chmod 755 ./run_me.sh && ./run_me.sh"
          
      - name: Build Xapian (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          cd xapian-core-$VERSION
          make
        shell: bash

      - name: Build Xapian (Windows)
        if: matrix.platform == 'windows'
        run: |
          set VERSION=${{ steps.xapian-version.outputs.version }}
          cd xapian/xapian-core-%VERSION%
          make
        shell: bash

      - name: Install Xapian (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          cd xapian-core-$VERSION
          make install
        shell: bash

      - name: Install Xapian (Windows)
        if: matrix.platform == 'windows'
        run: |
          cd xapian/xapian-core
          make install
        shell: bash

      - name: Verify static build
        run: |
          echo "Checking Xapian static library..."
          if [ "${{ matrix.platform }}" == "windows" ]; then
            find ${{ github.workspace }}/xapian-install -name "*.a" -o -name "*.lib" | head -10
          else
            find ${{ github.workspace }}/xapian-install -name "*.a" | head -10
          fi
        shell: bash

      - name: Create build artifact
        run: |
          cd ${{ github.workspace }}
          if [ "${{ matrix.archive_format }}" == "zip" ]; then
            # Use PowerShell for Windows zip creation
            powershell.exe -Command "Compress-Archive -Path 'xapian-install\\*' -DestinationPath 'xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}.zip' -Force"
          else
            tar -czf xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}.tar.gz -C xapian-install .
          fi
        shell: bash

      - name: Upload Xapian static build
        uses: actions/upload-artifact@v4
        with:
          name: xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}
          path: xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}.${{ matrix.archive_format }}
          retention-days: 30

      - name: Display build summary
        run: |
          echo "## Xapian Build Summary (${{ matrix.platform }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Xapian Version**: ${{ steps.xapian-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: Static" >> $GITHUB_STEP_SUMMARY
          echo "- **Static Build**: Enabled (--enable-static=yes)" >> $GITHUB_STEP_SUMMARY
          echo "- **Shared Build**: Disabled (--enable-shared=no)" >> $GITHUB_STEP_SUMMARY
          echo "- **Archive Format**: ${{ matrix.archive_format }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configure Args" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo '--enable-static=yes --enable-shared=no --disable-documentation ${{ matrix.configure_args }}' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installed Components" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find ${{ github.workspace }}/xapian-install -type f -name "*.a" 2>/dev/null | head -20 >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        shell: bash
