name: Build Xapian Static

on:
  workflow_dispatch:

env:
  # Build type
  BUILD_TYPE: Release

jobs:
  build-xapian:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: linux
            archive_format: tar.gz
            configure_args: ""
          - os: windows-latest
            platform: windows
            archive_format: zip
            configure_args: ""
          - os: macos-latest
            platform: macos
            archive_format: tar.gz
            configure_args: ""
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Linux)
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libmagic-dev \
            build-essential \
            autoconf \
            automake \
            libtool \
            git \
            zlib1g-dev \
            uuid-dev
        shell: bash

      - name: Install dependencies (Windows)
        if: matrix.platform == 'windows'
        run: |
          choco install wget -y
        shell: bash

      - name: Set up MSVC dev command prompt (Windows)
        if: matrix.platform == 'windows'
        uses: ilammy/msvc-dev-cmd@v1

      - name: Download zlib (Windows)
        if: matrix.platform == 'windows'
        run: |
          curl -L -o zlib.tgz https://zlib.net/zlib-1.3.1.tar.gz
          tar zxvf zlib.tgz

      - name: Build zlib (Windows)
        if: matrix.platform == 'windows'
        shell: cmd
        run: |
          cd zlib-1.3.1
          @rem nmake -f win32\Makefile.msc LOC="-MT" all
          nmake -f win32\Makefile.msc LOC="-MT" zlib.lib

      - name: Install MSYS2 (Windows)
        uses: msys2/setup-msys2@v2
        if: matrix.platform == 'windows'
        with:
          update: true
          install: >-
            base-devel
            mingw-w64-x86_64-toolchain
            autoconf
            automake
            libtool
            jq

      - name: Install dependencies (macOS)
        if: matrix.platform == 'macos'
        run: |
          brew install autoconf automake libtool libmagic
        shell: bash

      - name: Get latest Xapian stable release tag
        id: xapian-version
        run: |
          VERSION="1.4.29"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"
        shell: bash

      - name: Cache Xapian source
        id: cache-xapian-source
        uses: actions/cache@v4
        with:
          path: xapian
          key: xapian-core-${{ steps.xapian-version.outputs.version }}.tar.xz

      - name: Download Xapian source code
        if: steps.cache-xapian-source.outputs.cache-hit != 'true'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          echo "Downloading Xapian $VERSION"
          wget https://oligarchy.co.uk/xapian/$VERSION/xapian-core-$VERSION.tar.xz
          tar -Jxf xapian-core-$VERSION.tar.xz
          echo "Xapian source downloaded successfully"
        shell: bash

      - name: Configure Xapian (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          cd xapian-core-$VERSION
          ./configure \
            --prefix=${{ github.workspace }}/xapian-install \
            --enable-static=yes \
            --enable-shared=no \
            --disable-documentation \
            ${{ matrix.configure_args }}
        shell: bash
        
      - name: Write configure script (Windows)
        if: matrix.platform == 'windows'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          cd xapian-core-$VERSION
          cat <<- 'EOF' > run_me.sh
          export CC="cl -nologo"
          export CXX="./compile cl -nologo"
          export CXXFLAGS="-EHsc"
          export AR="lib"
          export LD="link"
          export NM="dumpbin"
          export CPPFLAGS="-I../zlib-1.3.1"
          export LDFLAGS="-I../zlib-1.3.1"
          export PREFIX_UNIX="$(cygpath $PREFIX)"
          echo "prefix=$PREFIX_UNIX"
          ./configure --enable-static=yes --enable-shared=no --prefix=$PREFIX_UNIX
          make
          make install
          EOF
          chmod 755 run_me.sh
          echo "===="
          cat run_me.sh
          echo "===="
        shell: bash
      
      - name: Configure and Build Xapian (Windows)
        if: matrix.platform == 'windows'
        shell: cmd
        run: |
          @echo on
          set VERSION=${{ steps.xapian-version.outputs.version }}
          cd xapian-core-%VERSION%   
          set PATH=C:\msys64\usr\bin;%PATH%
          set LIB=..\zlib-1.3.1;%LIB%
          set PREFIX=${{ github.workspace }}\xapian-install
          set MSYS2_PATH_TYPE=inherit
          bash -c "./run_me.sh"
          
      - name: Build Xapian (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          cd xapian-core-$VERSION
          make
        shell: bash

      - name: Install Xapian (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          VERSION="${{ steps.xapian-version.outputs.version }}"
          cd xapian-core-$VERSION
          make install
        shell: bash

      - name: Verify static build
        run: |
          echo "Checking Xapian static library..."
          if [ "${{ matrix.platform }}" == "windows" ]; then
            find "$(cygpath "${{ github.workspace }}")/xapian-install" -name "*.lib" | head -10
          else
            find ${{ github.workspace }}/xapian-install -name "*.a" | head -10
            nm -C ${{ github.workspace }}/xapian-install/lib/libxapian.a  | grep " U " | sort | uniq
          fi
        shell: bash

      - name: Create build artifact (Linux/macOS)
        if: matrix.platform != 'windows'
        run: |
          cd ${{ github.workspace }}
          tar -czf xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}.tar.gz -C xapian-install .
        shell: bash

      - name: Create build artifact (Windows)
        if: matrix.platform == 'windows'
        run: |
          Compress-Archive -Path 'xapian-install\\*' -DestinationPath 'xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}.zip' -Force
        shell: pwsh

      - name: Upload Xapian static build
        uses: actions/upload-artifact@v4
        with:
          name: xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}
          path: xapian-static-${{ steps.xapian-version.outputs.version }}-${{ matrix.platform }}.${{ matrix.archive_format }}
          retention-days: 30

      - name: Display build summary
        run: |
          echo "## Xapian Build Summary (${{ matrix.platform }})" >> $GITHUB_STEP_SUMMARY
          echo "- **Platform**: ${{ matrix.platform }}" >> $GITHUB_STEP_SUMMARY
          echo "- **OS**: ${{ matrix.os }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Xapian Version**: ${{ steps.xapian-version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Build Type**: Static" >> $GITHUB_STEP_SUMMARY
          echo "- **Static Build**: Enabled (--enable-static=yes)" >> $GITHUB_STEP_SUMMARY
          echo "- **Shared Build**: Disabled (--enable-shared=no)" >> $GITHUB_STEP_SUMMARY
          echo "- **Archive Format**: ${{ matrix.archive_format }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Configure Args" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo '--enable-static=yes --enable-shared=no --disable-documentation ${{ matrix.configure_args }}' >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Installed Components" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          find ${{ github.workspace }}/xapian-install -type f -name "*.a" 2>/dev/null | head -20 >> $GITHUB_STEP_SUMMARY || true
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        shell: bash
